
C:/Users/AndrewLaptop/Documents/ece243labs/lab3part3/part3.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
/* Program that finds the largest number in a list of integers	*/

            .text                   // executable code follows
            .global _start                  
_start:                             
            MOV     R4, #RESULT     // R4 points to result location
   0:	e3a04040 	mov	r4, #64	; 0x40
            LDR     R0, [R4, #4]    // R0 holds the number of elements in the list
   4:	e5940004 	ldr	r0, [r4, #4]
            MOV     R1, #NUMBERS    // R1 points to the start of the list
   8:	e3a01048 	mov	r1, #72	; 0x48
            BL      LARGE           
   c:	eb000001 	bl	18 <LARGE>
            STR     R0, [R4]        // R0 holds the subroutine return value
  10:	e5840000 	str	r0, [r4]

00000014 <END>:

END:        B       END             
  14:	eafffffe 	b	14 <END>

00000018 <LARGE>:
 *              R1 has the address of the start of the list
		R2 has a copy of R0, loops remaining
		R3 holds current list item value
 * Returns: R0 returns the largest item in the list
 */
LARGE:		MOV	 R2, R0		// copy num elements into r2
  18:	e1a02000 	mov	r2, r0
		LDR	 R0, [R1]	// largest number thus far (1st in list)
  1c:	e5910000 	ldr	r0, [r1]
		MOV	 R15, #LARGE_LOOP
  20:	e3a0f024 	mov	pc, #36	; 0x24

00000024 <LARGE_LOOP>:

LARGE_LOOP:    	SUBS     R2, #1         // decrement the loop counter
  24:	e2522001 	subs	r2, r2, #1
         	MOVEQ    R15, R14       // if result is equal to 0, change pc to r14
  28:	01a0f00e 	moveq	pc, lr
         	LDR      R3, [R1, #4]!  // get the next number
  2c:	e5b13004 	ldr	r3, [r1, #4]!
         	CMP      R0, R3         // check if larger number found
  30:	e1500003 	cmp	r0, r3
         	BGE      LARGE_LOOP     // go to next element if r3 <= r0
  34:	aafffffa 	bge	24 <LARGE_LOOP>
         	MOV      R0, R3         // update the largest number r0 = r3
  38:	e1a00003 	mov	r0, r3
        	B        LARGE_LOOP
  3c:	eafffff8 	b	24 <LARGE_LOOP>

00000040 <RESULT>:
  40:	00000000 	.word	0x00000000

00000044 <N>:
  44:	00000007 	.word	0x00000007

00000048 <NUMBERS>:
  48:	00000004 	.word	0x00000004
  4c:	00000005 	.word	0x00000005
  50:	00000003 	.word	0x00000003
  54:	00000006 	.word	0x00000006
  58:	00000001 	.word	0x00000001
  5c:	00000008 	.word	0x00000008
  60:	00000002 	.word	0x00000002
