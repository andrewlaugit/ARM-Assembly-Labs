
C:/Users/AndrewLaptop/Documents/ece243labs/lab5/part4.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
/* Program that creates a clock second delay */

          .text                   // executable code follows
          .global _start                  

_start: 	MOV     R4, #KEY_ADD    // load the key edgecapture
   0:	e3a04f59 	mov	r4, #356	; 0x164
		LDR	R4, [R4]	
   4:	e5944000 	ldr	r4, [r4]
		MOV	R5, #0		// r5 will hold the seconds, ones
   8:	e3a05000 	mov	r5, #0
		MOV	R6, #0		// r6 will hold the seconds, tens
   c:	e3a06000 	mov	r6, #0
		MOV	R10, #0		// r10 will hold the hundredths of seconds, ones
  10:	e3a0a000 	mov	r10, #0
		MOV	R11, #0		// r11 will hold the hundredths of seconds, tens
  14:	e3a0b000 	mov	r11, #0
		MOV	R7, #1		// will be like boolean, 1 for go, 0 for stop
  18:	e3a07001 	mov	r7, #1
		LDR	R8, =0xFFFEC600 // address of A9 private timer
  1c:	e59f8150 	ldr	r8, [pc, #336]	; 174 <BIT_CODES+0xc>
		LDR	R9, =2000000	// 2 mil / 200 MHz should equal 0.01 seconds
  20:	e59f9150 	ldr	r9, [pc, #336]	; 178 <BIT_CODES+0x10>
		STR	R9, [R8]
  24:	e5889000 	str	r9, [r8]
		MOV	R0, #0b011
  28:	e3a00003 	mov	r0, #3
		STR	R0, [R8, #8]	// start timer
  2c:	e5880008 	str	r0, [r8, #8]
		BL	DISPLAY		// write 0 to the hex0 initially
  30:	eb00002d 	bl	ec <DISPLAY>

00000034 <MAIN>:

MAIN:		LDR	R1, [R4, #12]	// read the KEY	
  34:	e594100c 	ldr	r1, [r4, #12]
		CMP	R1, #0		// if not equal, key has been pressed
  38:	e3510000 	cmp	r1, #0
        	MOV	R0, R7		// update go status
  3c:	e1a00007 	mov	r0, r7
		BLNE	STARTSTOP
  40:	1b000013 	blne	94 <STARTSTOP>
        	MOV 	R7, R0
  44:	e1a07000 	mov	r7, r0
        	MOV	R12, #0
  48:	e3a0c000 	mov	r12, #0
        	STRNE 	R1, [R4, #12]	// reset the edgecapture if set
  4c:	1584100c 	strne	r1, [r4, #12]

        	MOV 	R0, R5		// update count
  50:	e1a00005 	mov	r0, r5
        	MOV 	R1, R6
  54:	e1a01006 	mov	r1, r6
		MOV	R2, R10
  58:	e1a0200a 	mov	r2, r10
		MOV	R3, R11
  5c:	e1a0300b 	mov	r3, r11
		BL	COUNT		// increment count accordingly
  60:	eb000012 	bl	b0 <COUNT>
        	MOV 	R5, R0
  64:	e1a05000 	mov	r5, r0
       		MOV 	R6, R1
  68:	e1a06001 	mov	r6, r1
		MOV	R10, R2
  6c:	e1a0a002 	mov	r10, r2
		MOV	R11, R3
  70:	e1a0b003 	mov	r11, r3
        	BL	DISPLAY		// write the count to the hex
  74:	eb00001c 	bl	ec <DISPLAY>
		BL 	DELAY		// do a 0.25 sec delay	
  78:	eb000000 	bl	80 <DELAY>
		B	MAIN		// loop
  7c:	eaffffec 	b	34 <MAIN>

00000080 <DELAY>:

DELAY:		LDR	R0, [R8, #0xC]	// load timer status
  80:	e598000c 	ldr	r0, [r8, #12]
		CMP	R0, #0
  84:	e3500000 	cmp	r0, #0
		BEQ	DELAY		// repeat if not done
  88:	0afffffc 	beq	80 <DELAY>
		STR	R0, [R8, #0xC]	// reset F to 0
  8c:	e588000c 	str	r0, [r8, #12]
		MOV	PC, LR		// return to caller
  90:	e1a0f00e 	mov	pc, lr

00000094 <STARTSTOP>:

STARTSTOP:	CMP	R1, #1
  94:	e3510001 	cmp	r1, #1
		BEQ 	FLIPGO
  98:	0a000000 	beq	a0 <FLIPGO>
        	MOV	PC, LR		// return to caller
  9c:	e1a0f00e 	mov	pc, lr

000000a0 <FLIPGO>:
        
FLIPGO:		CMP	R0, #0
  a0:	e3500000 	cmp	r0, #0
		MOVEQ	R0, #1		// if already at go, make stop
  a4:	03a00001 	moveq	r0, #1
		MOVNE	R0, #0		// if already at stop, make go
  a8:	13a00000 	movne	r0, #0
       		MOV	PC, LR		// return to caller
  ac:	e1a0f00e 	mov	pc, lr

000000b0 <COUNT>:

COUNT:		CMP	R7, #1		// if no go, return
  b0:	e3570001 	cmp	r7, #1
		MOVNE	PC, LR		
  b4:	11a0f00e 	movne	pc, lr
		ADD	R0, #1		// increment hundreds(ones) of seconds
  b8:	e2800001 	add	r0, r0, #1

		CMP	R0, #10		// if hundreds(ones) 10, make it 0 and increment hundreds(tens) by 1
  bc:	e350000a 	cmp	r0, #10
		MOVEQ	R0, #0
  c0:	03a00000 	moveq	r0, #0
		ADDEQ	R1, #1
  c4:	02811001 	addeq	r1, r1, #1

		CMP	R1, #10		// if hundreds(tens) 100, make it 0 and increment seconds(ones) by 1
  c8:	e351000a 	cmp	r1, #10
		MOVEQ	R1, #0
  cc:	03a01000 	moveq	r1, #0
		ADDEQ	R2, #1
  d0:	02822001 	addeq	r2, r2, #1

		CMP	R2, #10		// if seconds(ones) 10, make it 0 and increment seconds(tens) by 1
  d4:	e352000a 	cmp	r2, #10
		MOVEQ	R2, #0
  d8:	03a02000 	moveq	r2, #0
		ADDEQ	R3, #1	
  dc:	02833001 	addeq	r3, r3, #1
		
		CMP	R3, #6		// if seconds(tens) 6, make it 0
  e0:	e3530006 	cmp	r3, #6
		MOVEQ	R3, #0
  e4:	03a03000 	moveq	r3, #0
	
		MOV	PC, LR		// return to caller
  e8:	e1a0f00e 	mov	pc, lr

000000ec <DISPLAY>:

/* Display R5 on HEX1-0, R6 on HEX3-2 and R7 on HEX5-4 */
DISPLAY:	PUSH 	{LR}       	
  ec:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
		MOV	R2, #0
  f0:	e3a02000 	mov	r2, #0
		MOV	R3, #HEX_ADD1	// r8 holds hex address of HEX3-HEX0
  f4:	e3a03f57 	mov	r3, #348	; 0x15c
		LDR	R3, [R3]
  f8:	e5933000 	ldr	r3, [r3]

		MOV	R1, R5		// display hundredths(ones)
  fc:	e1a01005 	mov	r1, r5
		BL	SEG7_CODE
 100:	eb000010 	bl	148 <SEG7_CODE>
		ORR	R2, R2, R0
 104:	e1822000 	orr	r2, r2, r0
	
		MOV	R1, R6		// display hundredths(tens)
 108:	e1a01006 	mov	r1, r6
		BL	SEG7_CODE
 10c:	eb00000d 	bl	148 <SEG7_CODE>
		ORR	R2, R2, R0, LSL #8
 110:	e1822400 	orr	r2, r2, r0, lsl #8
		
		MOV	R1, R10		// display seconds(ones)
 114:	e1a0100a 	mov	r1, r10
		BL	SEG7_CODE
 118:	eb00000a 	bl	148 <SEG7_CODE>
		ORR	R2, R2, R0, LSL #16
 11c:	e1822800 	orr	r2, r2, r0, lsl #16
		
		MOV	R1, R11		// display seconds(tenss)
 120:	e1a0100b 	mov	r1, r11
		BL	SEG7_CODE
 124:	eb000007 	bl	148 <SEG7_CODE>
		ORR	R2, R2, R0, LSL #24
 128:	e1822c00 	orr	r2, r2, r0, lsl #24
		
		STR	R2, [R3]
 12c:	e5832000 	str	r2, [r3]
	
		MOV	R2, #0
 130:	e3a02000 	mov	r2, #0
		MOV	R3, #HEX_ADD2	// r8 holds hex address of HEX5-HEX4
 134:	e3a03e16 	mov	r3, #352	; 0x160
		LDR	R3, [R3]
 138:	e5933000 	ldr	r3, [r3]
		STR	R2, [R3]	// blank the screen
 13c:	e5832000 	str	r2, [r3]
        	POP 	{LR}   
 140:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
		MOV	PC, LR		// return to caller
 144:	e1a0f00e 	mov	pc, lr

00000148 <SEG7_CODE>:
/* Subroutine to convert the digits from 0 to 9 to be shown on a HEX display.
 * 	Parameters: R0 = the decimal value of the digit to be displayed
 * 	Returns: R0 = bit patterm to be written to the HEX display
 */

SEG7_CODE:  	PUSH 	{R2}
 148:	e52d2004 	push	{r2}		; (str r2, [sp, #-4]!)
		MOV     R2, #BIT_CODES
 14c:	e3a02f5a 	mov	r2, #360	; 0x168
            	LDRB    R0, [R2, R1]
 150:	e7d20001 	ldrb	r0, [r2, r1]
		POP	{R2}
 154:	e49d2004 	pop	{r2}		; (ldr r2, [sp], #4)
            	MOV     PC, LR     
 158:	e1a0f00e 	mov	pc, lr

0000015c <HEX_ADD1>:
 15c:	ff200020 	.word	0xff200020

00000160 <HEX_ADD2>:
 160:	ff200030 	.word	0xff200030

00000164 <KEY_ADD>:
 164:	ff200050 	.word	0xff200050

00000168 <BIT_CODES>:
 168:	4f5b063f 	.word	0x4f5b063f
 16c:	077d6d66 	.word	0x077d6d66
 170:	0000677f 	.word	0x0000677f
 174:	fffec600 	.word	0xfffec600
 178:	001e8480 	.word	0x001e8480
