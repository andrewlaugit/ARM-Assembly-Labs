
C:/Users/AndrewLaptop/Documents/ece243labs/lab6/part2.axf:     file format elf32-littlearm


Disassembly of section .vectors:

00000000 <__cs3_interrupt_vector>:
   0:	ea00000e 	b	40 <__cs3_region_init_ram>
   4:	ea000047 	b	128 <SERVICE_UND>
   8:	ea000047 	b	12c <SERVICE_SVC>
   c:	ea000048 	b	134 <SERVICE_ABT_INST>
  10:	ea000046 	b	130 <SERVICE_ABT_DATA>
  14:	00000000 	.word	0x00000000
  18:	ea000025 	b	b4 <SERVICE_IRQ>
  1c:	ea000045 	b	138 <SERVICE_FIQ>

Disassembly of section .text:

00000040 <__cs3_region_start_ram>:

                  .text                                       
                  .global  _start                          
_start:                                         
/* Set up stack pointers for IRQ and SVC processor modes */
                  LDR	R0, =0b10011	// svc mode bits
  40:	e3a00013 	mov	r0, #19
		  MSR	CPSR, R0	
  44:	e129f000 	msr	CPSR_fc, r0
		  LDR	SP, =0x20000	// set stack pointer
  48:	e3a0d802 	mov	sp, #131072	; 0x20000

		  LDR	R0, =0b10010	// irq mode bits
  4c:	e3a00012 	mov	r0, #18
		  MSR	CPSR, R0	
  50:	e129f000 	msr	CPSR_fc, r0
		  LDR	SP, =0x3FFFFFFC	// set stack pointer
  54:	e3e0d10f 	mvn	sp, #-1073741821	; 0xc0000003

                  BL       CONFIG_GIC       // configure the ARM generic
  58:	eb000037 	bl	13c <CONFIG_GIC>
                                            // interrupt controller
                  BL       CONFIG_TIMER     // configure the Interval Timer
  5c:	eb000006 	bl	7c <CONFIG_TIMER>
                  BL       CONFIG_KEYS      // configure the pushbutton
  60:	eb00000d 	bl	9c <CONFIG_KEYS>
                                            // KEYs port

/* Enable IRQ interrupts in the ARM processor */
                  MOV     r0, #0b01010011
  64:	e3a00053 	mov	r0, #83	; 0x53
                  MSR     CPSR_c, r0 // enable interrupts in svc mode
  68:	e121f000 	msr	CPSR_c, r0
                  LDR      R5, =0xFF200000  // LEDR base address
  6c:	e59f514c 	ldr	r5, [pc, #332]	; 1c0 <ICDICER+0x40>

00000070 <LOOP>:
LOOP:                                          
                  LDR      R3, COUNT        // global variable
  70:	e59f3034 	ldr	r3, [pc, #52]	; ac <COUNT>
                  STR      R3, [R5]         // write to the LEDR lights
  74:	e5853000 	str	r3, [r5]
                  B        LOOP                
  78:	eafffffc 	b	70 <LOOP>

0000007c <CONFIG_TIMER>:

/* Configure the Interval Timer to create interrupts at 0.25 second intervals */
CONFIG_TIMER:   LDR	R0, =0xFF202000		// interval timer address
  7c:	e59f0140 	ldr	r0, [pc, #320]	; 1c4 <ICDICER+0x44>

		LDR	R1, =0x7840		// 25 mil = 17D7840, store the lower 16 bits
  80:	e59f1140 	ldr	r1, [pc, #320]	; 1c8 <__cs3_region_init_size_ram>
		STR	R1, [R0, #8]		// count start lower bits
  84:	e5801008 	str	r1, [r0, #8]
		LDR	R1, =0x17D		// store the upper 16 bits
  88:	e59f113c 	ldr	r1, [pc, #316]	; 1cc <__cs3_region_init_size_ram+0x4>
		STR	R1, [R0, #0xC]
  8c:	e580100c 	str	r1, [r0, #12]

		LDR	R1, =0b111		// set start, continue, and interrupt
  90:	e3a01007 	mov	r1, #7
		STR	R1, [R0, #4]
  94:	e5801004 	str	r1, [r0, #4]

                BX       LR                  
  98:	e12fff1e 	bx	lr

0000009c <CONFIG_KEYS>:

/* Configure the pushbutton KEYS to generate interrupts */
CONFIG_KEYS:    LDR	R0, =0xff200050	 // KEY ADDRESS
  9c:	e59f012c 	ldr	r0, [pc, #300]	; 1d0 <__cs3_region_init_size_ram+0x8>
		LDR	R1, =0b1111	 // enable interrrupts in all keys
  a0:	e3a0100f 	mov	r1, #15
		STR	R1, [R0, #8]	 // STORE INTO MASK
  a4:	e5801008 	str	r1, [r0, #8]
                  BX       LR                  
  a8:	e12fff1e 	bx	lr

000000ac <COUNT>:
  ac:	00000000 	.word	0x00000000

000000b0 <RUN>:
  b0:	00000001 	.word	0x00000001

000000b4 <SERVICE_IRQ>:
                                            // COUNT


/* Define the exception service routines */

SERVICE_IRQ:    PUSH     {R0-R7, LR}     
  b4:	e92d40ff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
                LDR      R4, =0xFFFEC100 // GIC CPU interface base address
  b8:	e59f4114 	ldr	r4, [pc, #276]	; 1d4 <__cs3_region_init_size_ram+0xc>
                LDR      R5, [R4, #0x0C] // read the ICCIAR in the CPU
  bc:	e594500c 	ldr	r5, [r4, #12]

000000c0 <KEYS_HANDLER>:
                                         // interface

KEYS_HANDLER:                       
                CMP      R5, #73         // check the interrupt ID
  c0:	e3550049 	cmp	r5, #73	; 0x49
		BLEQ	 KEY_ISR	 // if id corresponds to keys
  c4:	0b000005 	bleq	e0 <KEY_ISR>
		CMPNE	 R5, #72	 // compare against id for interval timer
  c8:	13550048 	cmpne	r5, #72	; 0x48
		BLEQ	 TIMER_ISR
  cc:	0b00000b 	bleq	100 <TIMER_ISR>

000000d0 <UNEXPECTED>:

UNEXPECTED:     BNE      UNEXPECTED      // if not recognized, stop here 
  d0:	1afffffe 	bne	d0 <UNEXPECTED>

000000d4 <EXIT_IRQ>:

EXIT_IRQ:       STR      R5, [R4, #0x10] 	// write to the End of Interrupt
  d4:	e5845010 	str	r5, [r4, #16]
                                         	// Register (ICCEOIR)
                POP      {R0-R7, LR}     
  d8:	e8bd40ff 	pop	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
                SUBS     PC, LR, #4      	// return from exception
  dc:	e25ef004 	subs	pc, lr, #4

000000e0 <KEY_ISR>:

KEY_ISR:	LDR		R0, =0xff200050	 	// load key adress
  e0:	e59f00e8 	ldr	r0, [pc, #232]	; 1d0 <__cs3_region_init_size_ram+0x8>
		LDR		R1, [R0, #0xC]		// READ THE EDGE CAPTURE BITS
  e4:	e590100c 	ldr	r1, [r0, #12]
                STR		R1, [R0, #0xC]		// RESET THE EDGE CAPTURE
  e8:	e580100c 	str	r1, [r0, #12]
                
                LDR		R3, =RUN		// load run
  ec:	e59f30e4 	ldr	r3, [pc, #228]	; 1d8 <__cs3_region_init_size_ram+0x10>
                LDR		R2, [R3]			
  f0:	e5932000 	ldr	r2, [r3]
                EOR		R2, #1		// flip run value
  f4:	e2222001 	eor	r2, r2, #1
                STR		R2, [R3]		// save new pattern
  f8:	e5832000 	str	r2, [r3]

000000fc <KEY_ISR_END>:
                
KEY_ISR_END:	BX		LR			// return to caller
  fc:	e12fff1e 	bx	lr

00000100 <TIMER_ISR>:

TIMER_ISR:	LDR	R0, =0xFF202000		// load adddress for interval timer
 100:	e59f00bc 	ldr	r0, [pc, #188]	; 1c4 <ICDICER+0x44>
		LDR	R1, =1			// clear the interrupt request
 104:	e3a01001 	mov	r1, #1
		STR	R1, [R0]		
 108:	e5801000 	str	r1, [r0]
		
		LDR	R0, =RUN		// get run value
 10c:	e59f00c4 	ldr	r0, [pc, #196]	; 1d8 <__cs3_region_init_size_ram+0x10>
		LDR	R0, [R0]		
 110:	e5900000 	ldr	r0, [r0]

		LDR	R2, =COUNT		// get count value
 114:	e59f20c0 	ldr	r2, [pc, #192]	; 1dc <__cs3_region_init_size_ram+0x14>
		LDR	R1, [R2]
 118:	e5921000 	ldr	r1, [r2]
		ADD	R1, R1, R0		// increment count by run
 11c:	e0811000 	add	r1, r1, r0
		STR	R1, [R2]		// store new count value
 120:	e5821000 	str	r1, [r2]

		BX 	LR			// return to caller	
 124:	e12fff1e 	bx	lr

00000128 <SERVICE_UND>:


/* Define the exception service routines */
/* Undefined instructions */
SERVICE_UND:                                
                    B   SERVICE_UND         
 128:	eafffffe 	b	128 <SERVICE_UND>

0000012c <SERVICE_SVC>:
/* Software interrupts */
SERVICE_SVC:                                
                    B   SERVICE_SVC         
 12c:	eafffffe 	b	12c <SERVICE_SVC>

00000130 <SERVICE_ABT_DATA>:
/* Aborted data reads */
SERVICE_ABT_DATA:                           
                    B   SERVICE_ABT_DATA    
 130:	eafffffe 	b	130 <SERVICE_ABT_DATA>

00000134 <SERVICE_ABT_INST>:
/* Aborted instruction fetch */
SERVICE_ABT_INST:                           
                    B   SERVICE_ABT_INST    
 134:	eafffffe 	b	134 <SERVICE_ABT_INST>

00000138 <SERVICE_FIQ>:
SERVICE_FIQ:                                
                    B   SERVICE_FIQ                                             
 138:	eafffffe 	b	138 <SERVICE_FIQ>

0000013c <CONFIG_GIC>:

/* 
 * Configure the Generic Interrupt Controller (GIC)
*/
CONFIG_GIC:
				PUSH		{LR}
 13c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
				/* CONFIG_INTERRUPT (int_ID (R0), CPU_target (R1)); */
    			/*MOV		R0, #MPCORE_PRIV_TIMER_IRQ
    			MOV		R1, #CPU0
    			BL			CONFIG_INTERRUPT
			*/
    			MOV		R0, #INTERVAL_TIMER_IRQ
 140:	e3a00048 	mov	r0, #72	; 0x48
    			MOV		R1, #CPU0
 144:	e3a01001 	mov	r1, #1
    			BL			CONFIG_INTERRUPT
 148:	eb00000a 	bl	178 <CONFIG_INTERRUPT>
    			
                MOV		R0, #KEYS_IRQ // 73
 14c:	e3a00049 	mov	r0, #73	; 0x49
    			MOV		R1, #CPU0
 150:	e3a01001 	mov	r1, #1
    			BL			CONFIG_INTERRUPT
 154:	eb000007 	bl	178 <CONFIG_INTERRUPT>

				/* configure the GIC CPU interface */
    			LDR		R0, =0xFFFEC100		// base address of CPU interface
 158:	e59f0074 	ldr	r0, [pc, #116]	; 1d4 <__cs3_region_init_size_ram+0xc>
    			/* Set Interrupt Priority Mask Register (ICCPMR) */
    			LDR		R1, =0xFFFF 			// enable interrupts of all priorities levels
 15c:	e59f107c 	ldr	r1, [pc, #124]	; 1e0 <__cs3_region_init_size_ram+0x18>
    			STR		R1, [R0, #0x04]
 160:	e5801004 	str	r1, [r0, #4]
    			/* Set the enable bit in the CPU Interface Control Register (ICCICR). This bit
				 * allows interrupts to be forwarded to the CPU(s) */
    			MOV		R1, #1
 164:	e3a01001 	mov	r1, #1
    			STR		R1, [R0]
 168:	e5801000 	str	r1, [r0]
    
    			/* Set the enable bit in the Distributor Control Register (ICDDCR). This bit
				 * allows the distributor to forward interrupts to the CPU interface(s) */
    			LDR		R0, =0xFFFED000
 16c:	e59f0070 	ldr	r0, [pc, #112]	; 1e4 <__cs3_region_init_size_ram+0x1c>
    			STR		R1, [R0]    
 170:	e5801000 	str	r1, [r0]
    
    			POP     	{PC}
 174:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00000178 <CONFIG_INTERRUPT>:
 * other registers in the GIC
 * Arguments: R0 = interrupt ID, N
 *            R1 = CPU target
*/
CONFIG_INTERRUPT:
    			PUSH		{R4-R5, LR}
 178:	e92d4030 	push	{r4, r5, lr}
    
    			/* Configure Interrupt Set-Enable Registers (ICDISERn). 
				 * reg_offset = (integer_div(N / 32) * 4
				 * value = 1 << (N mod 32) */
    			LSR		R4, R0, #3							// calculate reg_offset
 17c:	e1a041a0 	lsr	r4, r0, #3
    			BIC		R4, R4, #3							// R4 = reg_offset
 180:	e3c44003 	bic	r4, r4, #3
				LDR		R2, =0xFFFED100
 184:	e59f205c 	ldr	r2, [pc, #92]	; 1e8 <__cs3_region_init_size_ram+0x20>
				ADD		R4, R2, R4							// R4 = address of ICDISER
 188:	e0824004 	add	r4, r2, r4
    
    			AND		R2, R0, #0x1F   					// N mod 32
 18c:	e200201f 	and	r2, r0, #31
				MOV		R5, #1								// enable
 190:	e3a05001 	mov	r5, #1
    			LSL		R2, R5, R2							// R2 = value
 194:	e1a02215 	lsl	r2, r5, r2

				/* now that we have the register address (R4) and value (R2), we need to set the
				 * correct bit in the GIC register */
    			LDR		R3, [R4]								// read current register value
 198:	e5943000 	ldr	r3, [r4]
    			ORR		R3, R3, R2							// set the enable bit
 19c:	e1833002 	orr	r3, r3, r2
    			STR		R3, [R4]								// store the new register value
 1a0:	e5843000 	str	r3, [r4]

    			/* Configure Interrupt Processor Targets Register (ICDIPTRn)
     			 * reg_offset = integer_div(N / 4) * 4
     			 * index = N mod 4 */
    			BIC		R4, R0, #3							// R4 = reg_offset
 1a4:	e3c04003 	bic	r4, r0, #3
				LDR		R2, =0xFFFED800
 1a8:	e59f203c 	ldr	r2, [pc, #60]	; 1ec <__cs3_region_init_size_ram+0x24>
				ADD		R4, R2, R4							// R4 = word address of ICDIPTR
 1ac:	e0824004 	add	r4, r2, r4
    			AND		R2, R0, #0x3						// N mod 4
 1b0:	e2002003 	and	r2, r0, #3
				ADD		R4, R2, R4							// R4 = byte address in ICDIPTR
 1b4:	e0824004 	add	r4, r2, r4

				/* now that we have the register address (R4) and value (R2), write to (only)
				 * the appropriate byte */
				STRB		R1, [R4]
 1b8:	e5c41000 	strb	r1, [r4]
    
    			POP		{R4-R5, PC}
 1bc:	e8bd8030 	pop	{r4, r5, pc}
 1c0:	ff200000 	.word	0xff200000
 1c4:	ff202000 	.word	0xff202000
 1c8:	00007840 	.word	0x00007840
 1cc:	0000017d 	.word	0x0000017d
 1d0:	ff200050 	.word	0xff200050
 1d4:	fffec100 	.word	0xfffec100
 1d8:	000000b0 	.word	0x000000b0
 1dc:	000000ac 	.word	0x000000ac
 1e0:	0000ffff 	.word	0x0000ffff
 1e4:	fffed000 	.word	0xfffed000
 1e8:	fffed100 	.word	0xfffed100
 1ec:	fffed800 	.word	0xfffed800
