
C:/Users/AndrewLaptop/Documents/ece243labs/lab6/part4.axf:     file format elf32-littlearm


Disassembly of section .vectors:

00000000 <__cs3_interrupt_vector>:
   0:	ea00000e 	b	40 <__cs3_region_init_ram>
   4:	ea0000ab 	b	2b8 <SERVICE_UND>
   8:	ea0000ab 	b	2bc <SERVICE_SVC>
   c:	ea0000ac 	b	2c4 <SERVICE_ABT_INST>
  10:	ea0000aa 	b	2c0 <SERVICE_ABT_DATA>
  14:	00000000 	.word	0x00000000
  18:	ea000032 	b	e8 <SERVICE_IRQ>
  1c:	ea0000a9 	b	2c8 <SERVICE_FIQ>

Disassembly of section .text:

00000040 <__cs3_region_start_ram>:

                  .text                                       
                  .global  _start                          
_start:                                         
/* Set up stack pointers for IRQ and SVC processor modes */
                  LDR	R0, =0b10011	// svc mode bits
  40:	e3a00013 	mov	r0, #19
		  MSR	CPSR, R0	
  44:	e129f000 	msr	CPSR_fc, r0
		  LDR	SP, =0x20000	// set stack pointer
  48:	e3a0d802 	mov	sp, #131072	; 0x20000

		  LDR	R0, =0b10010	// irq mode bits
  4c:	e3a00012 	mov	r0, #18
		  MSR	CPSR, R0	
  50:	e129f000 	msr	CPSR_fc, r0
		  LDR	SP, =0x3FFFFFFC	// set stack pointer
  54:	e3e0d10f 	mvn	sp, #-1073741821	; 0xc0000003

                    BL      CONFIG_GIC          // configure the ARM generic
  58:	eb00009b 	bl	2cc <CONFIG_GIC>
                                                // interrupt controller
                    BL      CONFIG_PRIV_TIMER   // configure the private timer
  5c:	eb00000a 	bl	8c <CONFIG_PRIV_TIMER>
                    BL      CONFIG_TIMER        // configure the Interval Timer
  60:	eb00000f 	bl	a4 <CONFIG_TIMER>
                    BL      CONFIG_KEYS         // configure the pushbutton
  64:	eb000016 	bl	c4 <CONFIG_KEYS>
                                                // KEYs port
/* Enable IRQ interrupts in the ARM processor */
                  MOV     r0, #0b01010011
  68:	e3a00053 	mov	r0, #83	; 0x53
                  MSR     CPSR_c, r0 // enable interrupts in svc mode
  6c:	e121f000 	msr	CPSR_c, r0
                    LDR     R5, =0xFF200000     // LEDR base address
  70:	e59f52f0 	ldr	r5, [pc, #752]	; 368 <BIT_CODES+0xc>
                    LDR     R6, =0xFF200020     // HEX3-0 base address
  74:	e59f62f0 	ldr	r6, [pc, #752]	; 36c <BIT_CODES+0x10>

00000078 <LOOP>:
LOOP:                                           
                    LDR     R4, COUNT           // global variable
  78:	e59f4054 	ldr	r4, [pc, #84]	; d4 <COUNT>
                    STR     R4, [R5]            // light up the red lights
  7c:	e5854000 	str	r4, [r5]
                    LDR     R4, HEX_code        // global variable
  80:	e59f405c 	ldr	r4, [pc, #92]	; e4 <HEX_code>
                    STR     R4, [R6]            // show the time in format
  84:	e5864000 	str	r4, [r6]
                                                // SS:DD
                    B       LOOP                
  88:	eafffffa 	b	78 <LOOP>

0000008c <CONFIG_PRIV_TIMER>:

/* Configure the MPCore private timer to create interrupts every 1/100 seconds */
CONFIG_PRIV_TIMER:  LDR	R0, =0xFFFEC600		// a9 private timer address
  8c:	e59f02dc 	ldr	r0, [pc, #732]	; 370 <BIT_CODES+0x14>

		LDR	R1, =2000000		// 2 million
  90:	e59f12dc 	ldr	r1, [pc, #732]	; 374 <BIT_CODES+0x18>
		STR	R1, [R0]		// count st
  94:	e5801000 	str	r1, [r0]
		LDR	R1, =0b111		// set interrupt, auto-reload,and start
  98:	e3a01007 	mov	r1, #7
		STR	R1, [R0, #8]
  9c:	e5801008 	str	r1, [r0, #8]

                BX       LR
  a0:	e12fff1e 	bx	lr

000000a4 <CONFIG_TIMER>:
                               
/* Configure the Interval Timer to create interrupts at 0.25 second intervals */
CONFIG_TIMER:   LDR	R0, =0xFF202000		// interval timer address
  a4:	e59f02cc 	ldr	r0, [pc, #716]	; 378 <BIT_CODES+0x1c>

		LDR	R1, =0x7840		// 25 mil = 17D7840, store the lower 16 bits
  a8:	e59f12cc 	ldr	r1, [pc, #716]	; 37c <BIT_CODES+0x20>
		STR	R1, [R0, #8]		// count start lower bits
  ac:	e5801008 	str	r1, [r0, #8]
		LDR	R1, =0x17D		// store the upper 16 bits
  b0:	e59f12c8 	ldr	r1, [pc, #712]	; 380 <BIT_CODES+0x24>
		STR	R1, [R0, #0xC]
  b4:	e580100c 	str	r1, [r0, #12]

		LDR	R1, =0b111		// set start, continue, and interrupt
  b8:	e3a01007 	mov	r1, #7
		STR	R1, [R0, #4]
  bc:	e5801004 	str	r1, [r0, #4]

                BX       LR
  c0:	e12fff1e 	bx	lr

000000c4 <CONFIG_KEYS>:
                      
/* Configure the pushbutton KEYS to generate interrupts */
CONFIG_KEYS:    LDR	R0, =0xff200050	 // KEY ADDRESS
  c4:	e59f02b8 	ldr	r0, [pc, #696]	; 384 <BIT_CODES+0x28>
		LDR	R1, =0b1111	 // enable interrrupts in all keys
  c8:	e3a0100f 	mov	r1, #15
		STR	R1, [R0, #8]	 // STORE INTO MASK
  cc:	e5801008 	str	r1, [r0, #8]
                BX       LR                
  d0:	e12fff1e 	bx	lr

000000d4 <COUNT>:
  d4:	00000000 	.word	0x00000000

000000d8 <RUN>:
  d8:	00000001 	.word	0x00000001

000000dc <RUN_TIME>:
  dc:	00000001 	.word	0x00000001

000000e0 <TIME>:
  e0:	00000000 	.word	0x00000000

000000e4 <HEX_code>:
  e4:	00000000 	.word	0x00000000

000000e8 <SERVICE_IRQ>:
HEX_code:           .word   0x0       // used for 7-segment displays


/* Define the exception service routines */

SERVICE_IRQ:    PUSH     {R0-R7, LR}     
  e8:	e92d40ff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
                LDR      R4, =0xFFFEC100 // GIC CPU interface base address
  ec:	e59f4294 	ldr	r4, [pc, #660]	; 388 <BIT_CODES+0x2c>
                LDR      R5, [R4, #0x0C] // read the ICCIAR in the CPU
  f0:	e594500c 	ldr	r5, [r4, #12]

000000f4 <KEYS_HANDLER>:
                                         // interface

KEYS_HANDLER:                       
                CMP      R5, #73         // check the interrupt ID
  f4:	e3550049 	cmp	r5, #73	; 0x49
		BEQ	 KEY_ISR	 // if id corresponds to keys
  f8:	0a000007 	beq	11c <KEY_ISR>

		CMP	 R5, #72	 // compare against id for interval timer
  fc:	e3550048 	cmp	r5, #72	; 0x48
		BEQ	 TIMER_ISR
 100:	0a000039 	beq	1ec <TIMER_ISR>

		CMP	 R5, #29	// compare against id for private timer
 104:	e355001d 	cmp	r5, #29
		BEQ	 PRIVATE_TIMER_ISR 
 108:	0a000041 	beq	214 <PRIVATE_TIMER_ISR>

0000010c <UNEXPECTED>:

UNEXPECTED:     BNE      UNEXPECTED      // if not recognized, stop here 
 10c:	1afffffe 	bne	10c <UNEXPECTED>

00000110 <EXIT_IRQ>:

EXIT_IRQ:       STR      R5, [R4, #0x10] 	// write to the End of Interrupt
 110:	e5845010 	str	r5, [r4, #16]
                                         	// Register (ICCEOIR)
                POP      {R0-R7, LR}     
 114:	e8bd40ff 	pop	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
                SUBS     PC, LR, #4      	// return from exception
 118:	e25ef004 	subs	pc, lr, #4

0000011c <KEY_ISR>:

KEY_ISR:	LDR		R0, =0xff200050	 	// load key adress
 11c:	e59f0260 	ldr	r0, [pc, #608]	; 384 <BIT_CODES+0x28>
		LDR		R1, [R0, #0xC]		// READ THE EDGE CAPTURE BITS
 120:	e590100c 	ldr	r1, [r0, #12]
                STR		R1, [R0, #0xC]		// RESET THE EDGE CAPTURE
 124:	e580100c 	str	r1, [r0, #12]

00000128 <KEY0_ISR>:
                
KEY0_ISR:	ANDS		R2, R1, #0b0001		// see if key0 was pressed
 128:	e2112001 	ands	r2, r1, #1
		BEQ		KEY1_ISR		// if not pressed, check other keys		
 12c:	0a000003 	beq	140 <KEY1_ISR>
		LDR		R3, =RUN		// load run
 130:	e59f3254 	ldr	r3, [pc, #596]	; 38c <BIT_CODES+0x30>
                LDR		R2, [R3]			
 134:	e5932000 	ldr	r2, [r3]
                EOR		R2, #1			// flip run value
 138:	e2222001 	eor	r2, r2, #1
                STR		R2, [R3]		// save new pattern
 13c:	e5832000 	str	r2, [r3]

00000140 <KEY1_ISR>:

KEY1_ISR:	ANDS		R2, R1, #0b0010		// see if key1 was pressed
 140:	e2112002 	ands	r2, r1, #2
		BEQ		KEY2_ISR		// if not pressed, check other keys
 144:	0a00000f 	beq	188 <KEY2_ISR>
		LDR		R0, =0XFF202000		// load interval time address
 148:	e59f0228 	ldr	r0, [pc, #552]	; 378 <BIT_CODES+0x1c>
		LDR		R2, =0b1011		// stop timer
 14c:	e3a0200b 	mov	r2, #11
		STR		R2, [R0, #4]		// write to control reg
 150:	e5802004 	str	r2, [r0, #4]
		LDR		R2, [R0, #8]		// read the low 16 bits of current timer
 154:	e5902008 	ldr	r2, [r0, #8]
		LDR		R3, [R0, #0xC]		// read the high 16 bits of current timer
 158:	e590300c 	ldr	r3, [r0, #12]
		ORR		R2, R2, R3, LSL #16	// combine 2 half words into one word
 15c:	e1822803 	orr	r2, r2, r3, lsl #16
		LSR		R2, #1			// multiply current speed by 2, so divide count by 2
 160:	e1a020a2 	lsr	r2, r2, #1
		LDR		R3, =0xFFFF		// get the lowest 16 bits
 164:	e59f3224 	ldr	r3, [pc, #548]	; 390 <__cs3_region_init_size_ram>
		AND		R3, R3, R2
 168:	e0033002 	and	r3, r3, r2
		STR		R3, [R0, #8]		// store the low 16 bits of new timer
 16c:	e5803008 	str	r3, [r0, #8]
		LSR		R2, #16
 170:	e1a02822 	lsr	r2, r2, #16
		LDR		R3, =0xFFFF		// get the highest 16 bits
 174:	e59f3214 	ldr	r3, [pc, #532]	; 390 <__cs3_region_init_size_ram>
		AND		R3, R3, R2
 178:	e0033002 	and	r3, r3, r2
		STR		R3, [R0, #0xC]		// store the high 16 bits of new timer
 17c:	e580300c 	str	r3, [r0, #12]
		LDR		R2, =0b0111		// turn timer back on
 180:	e3a02007 	mov	r2, #7
		STR		R2, [R0, #4]		// write to control reg     
 184:	e5802004 	str	r2, [r0, #4]

00000188 <KEY2_ISR>:

KEY2_ISR:	ANDS		R2, R1, #0b0100		// see if key2 was pressed
 188:	e2112004 	ands	r2, r1, #4
		BEQ		KEY3_ISR		// if not pressed, done
 18c:	0a00000f 	beq	1d0 <KEY3_ISR>
		LDR		R0, =0XFF202000		// load interval time address
 190:	e59f01e0 	ldr	r0, [pc, #480]	; 378 <BIT_CODES+0x1c>
		LDR		R2, =0b1011		// stop timer
 194:	e3a0200b 	mov	r2, #11
		STR		R2, [R0, #4]		// write to control reg
 198:	e5802004 	str	r2, [r0, #4]
		LDR		R2, [R0, #8]		// read the low 16 bits of current timer
 19c:	e5902008 	ldr	r2, [r0, #8]
		LDR		R3, [R0, #0xC]		// read the high 16 bits of current timer
 1a0:	e590300c 	ldr	r3, [r0, #12]
		ORR		R2, R2, R3, LSL #16	// combine 2 half words into one word
 1a4:	e1822803 	orr	r2, r2, r3, lsl #16
		LSL		R2, #1			// divide current speed by 2, so multiply count by 2
 1a8:	e1a02082 	lsl	r2, r2, #1
		LDR		R3, =0xFFFF		// get the lowest 16 bits
 1ac:	e59f31dc 	ldr	r3, [pc, #476]	; 390 <__cs3_region_init_size_ram>
		AND		R3, R3, R2
 1b0:	e0033002 	and	r3, r3, r2
		STR		R3, [R0, #8]		// store the low 16 bits of new timer
 1b4:	e5803008 	str	r3, [r0, #8]
		LSR		R2, #16
 1b8:	e1a02822 	lsr	r2, r2, #16
		LDR		R3, =0xFFFF		// get the highest 16 bits
 1bc:	e59f31cc 	ldr	r3, [pc, #460]	; 390 <__cs3_region_init_size_ram>
		AND		R3, R3, R2
 1c0:	e0033002 	and	r3, r3, r2
		STR		R3, [R0, #0xC]		// store the high 16 bits of new timer
 1c4:	e580300c 	str	r3, [r0, #12]
		LDR		R2, =0b0111		// turn timer back on
 1c8:	e3a02007 	mov	r2, #7
		STR		R2, [R0, #4]		// write to control reg 
 1cc:	e5802004 	str	r2, [r0, #4]

000001d0 <KEY3_ISR>:

KEY3_ISR:	ANDS		R2, R1, #0b1000		// see if key2 was pressed
 1d0:	e2112008 	ands	r2, r1, #8
		BEQ		KEY_ISR_END		// if not pressed, done
 1d4:	0a000003 	beq	1e8 <KEY_ISR_END>
		
		LDR		R3, =RUN_TIME		// load run for timer
 1d8:	e59f31b4 	ldr	r3, [pc, #436]	; 394 <__cs3_region_init_size_ram+0x4>
                LDR		R2, [R3]			
 1dc:	e5932000 	ldr	r2, [r3]
                EOR		R2, #1			// flip run timer value
 1e0:	e2222001 	eor	r2, r2, #1
                STR		R2, [R3]		// save new pattern    
 1e4:	e5832000 	str	r2, [r3]

000001e8 <KEY_ISR_END>:
                
KEY_ISR_END:	B 		EXIT_IRQ		// exit interrupt routine
 1e8:	eaffffc8 	b	110 <EXIT_IRQ>

000001ec <TIMER_ISR>:

TIMER_ISR:	LDR		R0, =0xFF202000		// load adddress for interval timer
 1ec:	e59f0184 	ldr	r0, [pc, #388]	; 378 <BIT_CODES+0x1c>
		LDR		R1, =1			// clear the interrupt request
 1f0:	e3a01001 	mov	r1, #1
		STR		R1, [R0]		
 1f4:	e5801000 	str	r1, [r0]
		
		LDR		R0, =RUN		// get run value
 1f8:	e59f018c 	ldr	r0, [pc, #396]	; 38c <BIT_CODES+0x30>
		LDR		R0, [R0]		
 1fc:	e5900000 	ldr	r0, [r0]

		LDR		R2, =COUNT		// get count value
 200:	e59f2190 	ldr	r2, [pc, #400]	; 398 <__cs3_region_init_size_ram+0x8>
		LDR		R1, [R2]
 204:	e5921000 	ldr	r1, [r2]
		ADD		R1, R1, R0		// increment count by run
 208:	e0811000 	add	r1, r1, r0
		STR		R1, [R2]		// store new count value
 20c:	e5821000 	str	r1, [r2]

		B 		EXIT_IRQ
 210:	eaffffbe 	b	110 <EXIT_IRQ>

00000214 <PRIVATE_TIMER_ISR>:

PRIVATE_TIMER_ISR:
		LDR		R0, =0xFFFEC600		// load address of private timer
 214:	e59f0154 	ldr	r0, [pc, #340]	; 370 <BIT_CODES+0x14>
		LDR		R1, =1			// reset counter
 218:	e3a01001 	mov	r1, #1
		STR		R1, [R0, #0xC]
 21c:	e580100c 	str	r1, [r0, #12]

		LDR		R0, =RUN_TIME		// check if time should be incremented
 220:	e59f016c 	ldr	r0, [pc, #364]	; 394 <__cs3_region_init_size_ram+0x4>
		LDR		R0, [R0]	
 224:	e5900000 	ldr	r0, [r0]

		LDR		R3, =TIME		// get time value
 228:	e59f316c 	ldr	r3, [pc, #364]	; 39c <__cs3_region_init_size_ram+0xc>
		LDR		R1, [R3]
 22c:	e5931000 	ldr	r1, [r3]
		ADD		R1, R0			// increment time by run_time
 230:	e0811000 	add	r1, r1, r0
		LDR		R2, =6000
 234:	e59f2164 	ldr	r2, [pc, #356]	; 3a0 <__cs3_region_init_size_ram+0x10>
		CMP		R1, R2			// see if the time needs to be reset
 238:	e1510002 	cmp	r1, r2
		LDREQ		R1, =0			// reset if equal to 6000
 23c:	03a01000 	moveq	r1, #0
		STR		R1, [R3]		// update time
 240:	e5831000 	str	r1, [r3]
		LDR		R2, =0			// r2 will hold the seg codes
 244:	e3a02000 	mov	r2, #0

		MOV		R0, R1			// get the ones digit
 248:	e1a00001 	mov	r0, r1
		BL		DIVIDE
 24c:	eb00000f 	bl	290 <DIVIDE>
		BL		SEG7_CODE
 250:	eb000015 	bl	2ac <SEG7_CODE>
		ORR		R2, R2, R0		// save the seg7 for ones into r2
 254:	e1822000 	orr	r2, r2, r0

		MOV		R0, R1			// move the remainder for divide
 258:	e1a00001 	mov	r0, r1
		BL		DIVIDE			// get the tens digit
 25c:	eb00000b 	bl	290 <DIVIDE>
		BL		SEG7_CODE
 260:	eb000011 	bl	2ac <SEG7_CODE>
		ORR		R2, R2, R0, LSL #8	// save the seg7 for tens into r2
 264:	e1822400 	orr	r2, r2, r0, lsl #8

		MOV		R0, R1			// move the remainder for divide
 268:	e1a00001 	mov	r0, r1
		BL		DIVIDE			// get the hundreds digit
 26c:	eb000007 	bl	290 <DIVIDE>
		BL		SEG7_CODE
 270:	eb00000d 	bl	2ac <SEG7_CODE>
		ORR		R2, R2, R0, LSL #16	// save the seg7 for hundreds into r2
 274:	e1822800 	orr	r2, r2, r0, lsl #16

		MOV		R0, R1
 278:	e1a00001 	mov	r0, r1
		BL		SEG7_CODE
 27c:	eb00000a 	bl	2ac <SEG7_CODE>
		ORR		R2, R2, R0, LSL #24	// save the seg7 for thousands into r2
 280:	e1822c00 	orr	r2, r2, r0, lsl #24
		
		LDR		R3, =HEX_code
 284:	e59f3118 	ldr	r3, [pc, #280]	; 3a4 <__cs3_region_init_size_ram+0x14>
		STR		R2, [R3]
 288:	e5832000 	str	r2, [r3]
		
		B		EXIT_IRQ		
 28c:	eaffff9f 	b	110 <EXIT_IRQ>

00000290 <DIVIDE>:

/* Subroutine to perform the integer division R0 / 10.
 * Returns: quotient in R1, and remainder in R0
*/
DIVIDE:     	MOV    R1, #0	 // r3 is quotient
 290:	e3a01000 	mov	r1, #0

00000294 <CONT>:
		
CONT:    	CMP    R0, #10	 // 10 - R0, raise flags accordingly
 294:	e350000a 	cmp	r0, #10
            	BLT    DIV_END	 // if result -ve, done with division
 298:	ba000002 	blt	2a8 <DIV_END>
            	SUB    R0, #10	 // if not -ve, subtract r9 from r0
 29c:	e240000a 	sub	r0, r0, #10
            	ADD    R1, #1	 // add 1 to quotient
 2a0:	e2811001 	add	r1, r1, #1
            	B      CONT	 // repeat sequence
 2a4:	eafffffa 	b	294 <CONT>

000002a8 <DIV_END>:

DIV_END:    	MOV    PC, LR	 // return to caller
 2a8:	e1a0f00e 	mov	pc, lr

000002ac <SEG7_CODE>:
/* Subroutine to convert the digits from 0 to 9 to be shown on a HEX display.
 * 	Parameters: R0 = the decimal value of the digit to be displayed
 * 	Returns: R0 = bit patterm to be written to the HEX display
 */

SEG7_CODE:  	LDR     R3, =BIT_CODES
 2ac:	e59f30f4 	ldr	r3, [pc, #244]	; 3a8 <__cs3_region_init_size_ram+0x18>
            	LDRB    R0, [R3, R0]    
 2b0:	e7d30000 	ldrb	r0, [r3, r0]
            	MOV     PC, LR     
 2b4:	e1a0f00e 	mov	pc, lr

000002b8 <SERVICE_UND>:
	
/* Define the exception service routines */
/* Undefined instructions */
SERVICE_UND:                                
                    B   SERVICE_UND         
 2b8:	eafffffe 	b	2b8 <SERVICE_UND>

000002bc <SERVICE_SVC>:
/* Software interrupts */
SERVICE_SVC:                                
                    B   SERVICE_SVC         
 2bc:	eafffffe 	b	2bc <SERVICE_SVC>

000002c0 <SERVICE_ABT_DATA>:
/* Aborted data reads */
SERVICE_ABT_DATA:                           
                    B   SERVICE_ABT_DATA    
 2c0:	eafffffe 	b	2c0 <SERVICE_ABT_DATA>

000002c4 <SERVICE_ABT_INST>:
/* Aborted instruction fetch */
SERVICE_ABT_INST:                           
                    B   SERVICE_ABT_INST    
 2c4:	eafffffe 	b	2c4 <SERVICE_ABT_INST>

000002c8 <SERVICE_FIQ>:
SERVICE_FIQ:                                
                    B   SERVICE_FIQ                                             
 2c8:	eafffffe 	b	2c8 <SERVICE_FIQ>

000002cc <CONFIG_GIC>:

/* 
 * Configure the Generic Interrupt Controller (GIC)
*/
CONFIG_GIC:
				PUSH		{LR}
 2cc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    			/* Configure the A9 Private Timer interrupt, FPGA KEYs, and FPGA Timer
				/* CONFIG_INTERRUPT (int_ID (R0), CPU_target (R1)); */
    			MOV		R0, #MPCORE_PRIV_TIMER_IRQ
 2d0:	e3a0001d 	mov	r0, #29
    			MOV		R1, #CPU0
 2d4:	e3a01001 	mov	r1, #1
    			BL			CONFIG_INTERRUPT
 2d8:	eb00000d 	bl	314 <CONFIG_INTERRUPT>
    			MOV		R0, #INTERVAL_TIMER_IRQ
 2dc:	e3a00048 	mov	r0, #72	; 0x48
    			MOV		R1, #CPU0
 2e0:	e3a01001 	mov	r1, #1
    			BL			CONFIG_INTERRUPT
 2e4:	eb00000a 	bl	314 <CONFIG_INTERRUPT>
    			
                MOV		R0, #KEYS_IRQ // 73
 2e8:	e3a00049 	mov	r0, #73	; 0x49
    			MOV		R1, #CPU0
 2ec:	e3a01001 	mov	r1, #1
    			BL			CONFIG_INTERRUPT
 2f0:	eb000007 	bl	314 <CONFIG_INTERRUPT>

				/* configure the GIC CPU interface */
    			LDR		R0, =0xFFFEC100		// base address of CPU interface
 2f4:	e59f008c 	ldr	r0, [pc, #140]	; 388 <BIT_CODES+0x2c>
    			/* Set Interrupt Priority Mask Register (ICCPMR) */
    			LDR		R1, =0xFFFF 			// enable interrupts of all priorities levels
 2f8:	e59f1090 	ldr	r1, [pc, #144]	; 390 <__cs3_region_init_size_ram>
    			STR		R1, [R0, #0x04]
 2fc:	e5801004 	str	r1, [r0, #4]
    			/* Set the enable bit in the CPU Interface Control Register (ICCICR). This bit
				 * allows interrupts to be forwarded to the CPU(s) */
    			MOV		R1, #1
 300:	e3a01001 	mov	r1, #1
    			STR		R1, [R0]
 304:	e5801000 	str	r1, [r0]
    
    			/* Set the enable bit in the Distributor Control Register (ICDDCR). This bit
				 * allows the distributor to forward interrupts to the CPU interface(s) */
    			LDR		R0, =0xFFFED000
 308:	e59f009c 	ldr	r0, [pc, #156]	; 3ac <__cs3_region_init_size_ram+0x1c>
    			STR		R1, [R0]    
 30c:	e5801000 	str	r1, [r0]
    
    			POP     	{PC}
 310:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00000314 <CONFIG_INTERRUPT>:
 * other registers in the GIC
 * Arguments: R0 = interrupt ID, N
 *            R1 = CPU target
*/
CONFIG_INTERRUPT:
    			PUSH		{R4-R5, LR}
 314:	e92d4030 	push	{r4, r5, lr}
    
    			/* Configure Interrupt Set-Enable Registers (ICDISERn). 
				 * reg_offset = (integer_div(N / 32) * 4
				 * value = 1 << (N mod 32) */
    			LSR		R4, R0, #3							// calculate reg_offset
 318:	e1a041a0 	lsr	r4, r0, #3
    			BIC		R4, R4, #3							// R4 = reg_offset
 31c:	e3c44003 	bic	r4, r4, #3
				LDR		R2, =0xFFFED100
 320:	e59f2088 	ldr	r2, [pc, #136]	; 3b0 <__cs3_region_init_size_ram+0x20>
				ADD		R4, R2, R4							// R4 = address of ICDISER
 324:	e0824004 	add	r4, r2, r4
    
    			AND		R2, R0, #0x1F   					// N mod 32
 328:	e200201f 	and	r2, r0, #31
				MOV		R5, #1								// enable
 32c:	e3a05001 	mov	r5, #1
    			LSL		R2, R5, R2							// R2 = value
 330:	e1a02215 	lsl	r2, r5, r2

				/* now that we have the register address (R4) and value (R2), we need to set the
				 * correct bit in the GIC register */
    			LDR		R3, [R4]								// read current register value
 334:	e5943000 	ldr	r3, [r4]
    			ORR		R3, R3, R2							// set the enable bit
 338:	e1833002 	orr	r3, r3, r2
    			STR		R3, [R4]								// store the new register value
 33c:	e5843000 	str	r3, [r4]

    			/* Configure Interrupt Processor Targets Register (ICDIPTRn)
     			 * reg_offset = integer_div(N / 4) * 4
     			 * index = N mod 4 */
    			BIC		R4, R0, #3							// R4 = reg_offset
 340:	e3c04003 	bic	r4, r0, #3
				LDR		R2, =0xFFFED800
 344:	e59f2068 	ldr	r2, [pc, #104]	; 3b4 <__cs3_region_init_size_ram+0x24>
				ADD		R4, R2, R4							// R4 = word address of ICDIPTR
 348:	e0824004 	add	r4, r2, r4
    			AND		R2, R0, #0x3						// N mod 4
 34c:	e2002003 	and	r2, r0, #3
				ADD		R4, R2, R4							// R4 = byte address in ICDIPTR
 350:	e0824004 	add	r4, r2, r4

				/* now that we have the register address (R4) and value (R2), write to (only)
				 * the appropriate byte */
				STRB		R1, [R4]
 354:	e5c41000 	strb	r1, [r4]
    
    			POP		{R4-R5, PC}
 358:	e8bd8030 	pop	{r4, r5, pc}

0000035c <BIT_CODES>:
 35c:	4f5b063f 	.word	0x4f5b063f
 360:	077d6d66 	.word	0x077d6d66
 364:	0000677f 	.word	0x0000677f
 368:	ff200000 	.word	0xff200000
 36c:	ff200020 	.word	0xff200020
 370:	fffec600 	.word	0xfffec600
 374:	001e8480 	.word	0x001e8480
 378:	ff202000 	.word	0xff202000
 37c:	00007840 	.word	0x00007840
 380:	0000017d 	.word	0x0000017d
 384:	ff200050 	.word	0xff200050
 388:	fffec100 	.word	0xfffec100
 38c:	000000d8 	.word	0x000000d8
 390:	0000ffff 	.word	0x0000ffff
 394:	000000dc 	.word	0x000000dc
 398:	000000d4 	.word	0x000000d4
 39c:	000000e0 	.word	0x000000e0
 3a0:	00001770 	.word	0x00001770
 3a4:	000000e4 	.word	0x000000e4
 3a8:	0000035c 	.word	0x0000035c
 3ac:	fffed000 	.word	0xfffed000
 3b0:	fffed100 	.word	0xfffed100
 3b4:	fffed800 	.word	0xfffed800
